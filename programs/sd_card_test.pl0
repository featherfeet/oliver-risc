// Console width in characters.
/*
VAR SCREEN_HEIGHT_ROWS = 67;
VAR SCREEN_WIDTH_COLUMNS = 240;
VAR GPU_MEMORY_LENGTH;
GPU_MEMORY_LENGTH := SCREEN_WIDTH_COLUMNS * SCREEN_HEIGHT_ROWS;

// Cursor string.
VAR cursor_s = "_";

// On-screen location of the cursor.
VAR cursor_row_i = 0;
VAR cursor_column_i = 0;

// Print function. Takes one string argument. Prints it at the current cursor location.
VAR print_procedure_arg_string_s;
PROCEDURE print;
BEGIN
    VAR i = 0;
    output_address := cursor_row_i * SCREEN_WIDTH_COLUMNS + cursor_column_i;
    output_value := print_procedure_arg_string_s[0];

    WHILE output_value # 0 DO
    BEGIN
        CALL OUT;
        i := i + 1;
        cursor_column_i := cursor_column_i + 1;
        output_address := output_address + 1;
        output_value := print_procedure_arg_string_s[i];
    END;

    output_value := cursor_s[0];
    CALL OUT;
END;

// Procedure to move to next line.
PROCEDURE next_line;
BEGIN
    output_address := cursor_row_i * SCREEN_WIDTH_COLUMNS + cursor_column_i;
    output_value := 32;
    CALL OUT;
    cursor_column_i := 0;
    cursor_row_i := cursor_row_i + 1;
END;

// Print message.
VAR startup_message = "SD boot...";
print_procedure_arg_string_s := startup_message;
CALL print;
*/

// Set CS high.
__ASM__("CLOAD 16082,A");
__ASM__("CLOAD 1,B");
__ASM__("OUT A,B");

// Wait minimum of 74 dummy clock cycles.
__ASM__("CLOAD 255,B"); // Dummy value to write out.
__ASM__("CLOAD 0,C"); // Counter.
__ASM__("CLOAD 75,D"); // Counter max.
__ASM__("CLOAD 1,E"); // Counter increment.
__ASM__("sd_card_clock_loop:");
__ASM__("    CLOAD 16081,A"); // Port number for SPI.
__ASM__("    OUT A,B");
__ASM__("    ADD E,C");
__ASM__("    MOV A,C");
__ASM__("    CMP C,D");
__ASM__("    JMPL sd_card_clock_loop");

// Set CS low.
__ASM__("CLOAD 16082,A");
__ASM__("CLOAD 0,B");
__ASM__("OUT A,B");

// Procedure to send an SD card command.
VAR send_sd_command_arg_cmd;
VAR send_sd_command_arg_arg;
VAR send_sd_command_ret;
PROCEDURE send_sd_command;
BEGIN
    // Set CS low.
    __ASM__("CLOAD 16082,A");
    __ASM__("CLOAD 0,B");
    __ASM__("OUT A,B");
    // Bitwise-OR the command with 0x40 = 64 and store the result in register A.
    output_value := send_sd_command_arg_cmd; // The output_value variable is static, so it's easy to access from both PL/0 and assembly.
    __ASM__("CLOAD 64,A");
    __ASM__("LOAD output_value,B");
    __ASM__("OR A,B");
    // Send the value in register A as the command on SPI.
    __ASM__("CLOAD 16081,B");
    __ASM__("OUT B,A");
    // Send the 4 bytes in the command argument (send_sd_command_arg_arg) out, most-significant byte first.
    // Send the first byte in the command argument.
    output_value := send_sd_command_arg_arg;
    __ASM__("CLOAD [output_value],A"); // Load the address of the output_value variable into register A.
    __ASM__("CLOAD 3,B"); // Add 3 bytes to the loaded address.
    __ASM__("ADD A,B");
    __ASM__("RLOAD A,B"); // Load the 4 bytes at the new address into register B.
    __ASM__("CLOAD 16081,C"); // Send out the least-significant byte of register B on SPI.
    __ASM__("OUT C,B");
    // Send the second byte in the command argument.
    __ASM__("CLOAD [output_value],A"); // Load the address of the output_value variable into register A.
    __ASM__("CLOAD 2,B"); // Add 2 bytes to the loaded address.
    __ASM__("ADD A,B");
    __ASM__("RLOAD A,B"); // Load the 4 bytes at the new address into register B.
    __ASM__("OUT C,B"); // Send out the least-significant byte of register B on SPI.
    // Send the third byte in the command argument.
    __ASM__("CLOAD [output_value],A"); // Load the address of the output_value variable into register A.
    __ASM__("CLOAD 1,B"); // Add 2 bytes to the loaded address.
    __ASM__("ADD A,B");
    __ASM__("RLOAD A,B"); // Load the 4 bytes at the new address into register B.
    __ASM__("OUT C,B"); // Send out the least-significant byte of register B on SPI.
    // Send the fourth byte in the command argument.
    __ASM__("CLOAD [output_value],A"); // Load the address of the output_value variable into register A.
    __ASM__("RLOAD A,B"); // Load the 4 bytes at the address into register B.
    __ASM__("OUT C,B"); // Send out the least-significant byte of register B on SPI.
    // Send the CRC.
    VAR crc = 255;
    IF send_sd_command_arg_cmd = 0 THEN // CMD0
    BEGIN
        crc := 149; // Correct CRC for CMD0 with argument 0x0.
    END;
    IF send_sd_command_arg_cmd = 8 THEN // CMD8
    BEGIN
        crc := 135; // Correct CRC for CMD8 with argument 0x1AA.
    END;
    output_value := crc;
    __ASM__("CLOAD 16081,C");
    __ASM__("LOAD output_value,A");
    __ASM__("OUT C,A");
    // Wait for response.
    VAR i = 0;
    WHILE i <= 255 DO
    BEGIN
        __ASM__("CLOAD 16081,A");
        __ASM__("CLOAD 255,B");
        __ASM__("OUT A,B");
        __ASM__("IN A,B");
        __ASM__("CLOAD 128,A");
        __ASM__("AND A,B");
        __ASM__("STORE A,output_value");
        __ASM__("STORE B,output_address");
        IF output_value = 0 THEN
        BEGIN
            send_sd_command_ret := output_address;
            RETURN;
        END;
        i := i + 1;
    END;
END;

/*
// Procedure to count how many digits are in a number.
VAR integer_to_measure = 0;
VAR integer_length = 0;
PROCEDURE get_integer_length;
BEGIN
    integer_length := 0;
    VAR number_shifter;
    number_shifter := integer_to_measure;
    WHILE number_shifter > 0 DO
    BEGIN
        number_shifter := number_shifter / 10;
        integer_length := integer_length + 1;
    END;
END;

// Procedure to get the number of digits in an integer.
VAR integer = 0;
VAR line = 0;
PROCEDURE print_integer;
BEGIN
    integer_to_measure := integer;
    CALL get_integer_length; // Stores return value in `integer_length`.
    // Special case for 0.
    IF integer = 0 THEN
    BEGIN
        output_address := line * SCREEN_WIDTH_COLUMNS;
        output_value := 48;
        CALL OUT;
        RETURN;
    END;
    // Output the number one digit at a time, placing each digit at the correct position on-screen.
    VAR number_shifter;
    number_shifter := integer;
    WHILE number_shifter > 0 DO
    BEGIN
        VAR digit;
        digit := number_shifter % 10;
        output_address := line * SCREEN_WIDTH_COLUMNS;
        output_address := output_address + integer_length - 1;
        output_value := digit + 48;
        CALL OUT;
        integer_length := integer_length - 1;
        number_shifter := number_shifter / 10;
    END;
END;
*/

// Send CMD0 until we get a response of R1_IDLE_STATE.
send_sd_command_arg_cmd := 0; // CMD0
send_sd_command_arg_arg := 0;

WHILE send_sd_command_ret # 1 DO // 1 is R1_IDLE_STATE.
BEGIN
    CALL send_sd_command;
END;

/*
VAR idle_message = "Card idle.";
print_procedure_arg_string_s := idle_message;
CALL next_line;
CALL print;
*/

// Check the SD version.
send_sd_command_arg_cmd := 8; // CMD8
send_sd_command_arg_arg := 426; // 0x1AA
CALL send_sd_command;

output_value := send_sd_command_ret; // Bitwise-AND the returned value with R1_ILLEGAL_COMMAND (0x04) to check if the command was illegal.
__ASM__("LOAD output_value,A");
__ASM__("CLOAD 4,B");
__ASM__("AND A,B");
__ASM__("STORE A,output_value");
VAR s;
s := output_value;
VAR sd_card_type;
// SD card is type 1.
IF s # 0 THEN
BEGIN
    /*
    VAR card_type_message_1 = "TYPE 1";
    CALL next_line;
    print_procedure_arg_string_s := card_type_message_1;
    CALL print;
    */
    sd_card_type := 1;
END;
// SD card is not type 1.
IF s = 0 THEN
BEGIN
    __ASM__("CLOAD 16081,A");
    __ASM__("CLOAD 255,B");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("STORE C,output_value");
    IF output_value # 170 THEN // 170 = 0xAA
    BEGIN
        /*
        VAR err_msg = "CMD8 err";
        CALL next_line;
        print_procedure_arg_string_s := err_msg;
        CALL print;
        */
        CALL HALT;
    END;
    sd_card_type := 2;
    /*
    VAR card_type_message_1 = "TYPE 2";
    CALL next_line;
    print_procedure_arg_string_s := card_type_message_1;
    CALL print;
    */
END;

send_sd_command_ret := 255; // Just to make sure that it is actually zero when it gets set to zero by the procedure.

WHILE 1 = 1 DO
BEGIN
    send_sd_command_arg_cmd := 55; // CMD55 (0x37, escape for an application-specific command).
    send_sd_command_arg_arg := 0;
    CALL send_sd_command;
    // Initialize the card and send "host supports SDHC" if type was SD2.
    send_sd_command_arg_cmd := 41; // ACMD41 (0x29, initialize the card and send host capacity support info).
    IF sd_card_type = 2 THEN
    BEGIN
        send_sd_command_arg_arg := 64; // 0x40
    END;
    IF sd_card_type # 2 THEN
    BEGIN
        send_sd_command_arg_arg := 0;
    END;
    CALL send_sd_command;
    // When we get R1_READY_STATE (0) back, jump out of the loop.
    IF send_sd_command_ret = 0 THEN
    BEGIN
        __ASM__("CMP A,A");
        __ASM__("JMPE got_ready_state");
    END;
END;

__ASM__("got_ready_state:");

/*
VAR init_msg = "Init done";
CALL next_line;
print_procedure_arg_string_s := init_msg;
CALL print;
*/

// If type of card is SD2, then read the OCR register to check for an SDHC card.
IF sd_card_type = 2 THEN
BEGIN
    // Send CMD58.
    send_sd_command_arg_cmd := 58; // CMD58
    send_sd_command_arg_arg := 0;
    CALL send_sd_command;
    IF send_sd_command_ret # 0 THEN
    BEGIN
        /*
        CALL next_line;
        VAR cmd58_err_msg = "CMD58 err";
        print_procedure_arg_string_s := cmd58_err_msg;
        CALL print;
        */
        CALL HALT;
    END;
    // Check for SDHC card.
    __ASM__("CLOAD 16081,A");
    __ASM__("CLOAD 255,B");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("CLOAD 192,A"); // 192 = 0xC0
    __ASM__("AND A,C");
    __ASM__("STORE A,output_value");
    IF output_value = 192 THEN
    BEGIN
        sd_card_type := 3; // Use 3 to represent SDHC.
        /*
        CALL next_line;
        VAR sdhc_msg = "SDHC card";
        print_procedure_arg_string_s := sdhc_msg;
        CALL print;
        */
    END;
    /*
    IF output_value # 192 THEN
    BEGIN
        CALL next_line;
        VAR not_sdhc_msg = "Not SDHC card";
        print_procedure_arg_string_s := not_sdhc_msg;
        CALL print;
    END;
    */
    // Discard the rest of the OCR register, since it just holds the allowed voltage range.
    __ASM__("CLOAD 16081,A");
    __ASM__("CLOAD 255,B");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
    __ASM__("OUT A,B");
    __ASM__("IN A,C");
END;

// Set CS high.
__ASM__("CLOAD 16082,A");
__ASM__("CLOAD 1,B");
__ASM__("OUT A,B");

// Procedure to read data from the SD card.
VAR read_data_procedure_arg_block; // Logical block to be read.
VAR read_data_procedure_arg_destination_p; // Pointer (memory address) at which the data should be stored.
PROCEDURE read_data;
BEGIN
    VAR block;
    block := read_data_procedure_arg_block;
    // Set CS low.
    __ASM__("CLOAD 16082,A");
    __ASM__("CLOAD 0,B");
    __ASM__("OUT A,B");
    // If the SD card type is not SDHC, then use the direct address (not the block number) to read.
    IF sd_card_type # 3 THEN
    BEGIN
        block := block * 512;
    END;
    // Send CMD17.
    send_sd_command_arg_cmd := 17; // CMD17
    send_sd_command_arg_arg := block;
    CALL send_sd_command;
    IF send_sd_command_ret # 0 THEN
    BEGIN
        /*
        CALL next_line;
        VAR err_cmd17 = "CMD17 err";
        print_procedure_arg_string_s := err_cmd17;
        CALL print;
        */
        RETURN;
    END;
    // Wait for the start block token.
    output_value := 255;
    WHILE output_value = 255 DO
    BEGIN
        __ASM__("CLOAD 16081,A");
        __ASM__("CLOAD 255,B");
        __ASM__("OUT A,B");
        __ASM__("IN A,C");
        __ASM__("STORE C,output_value");
    END;
    IF output_value # 254 THEN // DATA_START_BLOCK = 0xFE = 254
    BEGIN
        /*
        CALL next_line;
        VAR err_read = "Read err";
        print_procedure_arg_string_s := err_read;
        CALL print;
        */
        RETURN;
    END;
    // Read the block of data (512 bytes).
    output_value := read_data_procedure_arg_destination_p;
    WHILE output_value < read_data_procedure_arg_destination_p + 512 DO
    BEGIN
        __ASM__("CLOAD 16081,A");
        __ASM__("CLOAD 255,B");
        __ASM__("OUT A,B");
        __ASM__("IN A,B");
        __ASM__("LOAD output_value,C");
        __ASM__("RSTORE B,C"); // RSTORE will overwrite the next 3 bytes as well, but this doesn't really matter since we are looping forwards (although it will corrupt the 3 bytes after the end of the memory used to hold the block.
        output_value := output_value + 1;
    END;
    // Set CS high.
    __ASM__("CLOAD 16082,A");
    __ASM__("CLOAD 1,B");
    __ASM__("OUT A,B");
END;

read_data_procedure_arg_block := 0;
read_data_procedure_arg_destination_p := 4000100; // Address 4 MB + 100 bytes should be past the area of memory used by the stack.
CALL read_data;

// Copy data read from SD card to screen.
VAR i = 0;

WHILE i < 512 DO
BEGIN
    output_value := read_data_procedure_arg_destination_p[i];
    output_address := i;
    CALL OUT;
    i := i + 1;
END;

// Finish.
CALL HALT;
