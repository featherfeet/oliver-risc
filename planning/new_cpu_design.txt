Goals:
    - Separate instruction-decoding stage.
        - loads values into Verilog registers operand1 and operand2 so that the execute stage always accesses the same Verilog registers, regardless of which variant is being executed
    - Offset register to speed up stack operations
    - Destination specifiable in arithmetic instructions
    - Left/right shift instructions
    - Argument type specifiers instead of separate opcodes
    - Argument size specifiers
    - Use single-bit flags instead of register A for results of CMP instructions
    - Unconditional JMP
    - Use single-bit flags for IE/IR.
    - FPU???
    - GPIO interrupts
    - Move GPU memory to the end of the ports so that changing the size of the GPU text buffer doesn't move the other ports around
    - More serial protocols - I2C
    - Single address space (no more offset for code section)

Registers (name - number - width - description):
IP - 'd0 - 32 bits - Instruction pointer. SDRAM address of the instruction to execute.
A - 'd1  - 32 bits - Used for the result of ADD, SUB, and CMP instructions.
B - 'd2  - 32 bits - Generic register.
C - 'd3  - 32 bits - Generic register.
D - 'd4  - 32 bits - Generic register.
E - 'd5  - 32 bits - Generic register.
F - 'd6  - 32 bits - Generic register.
G - 'd7  - 32 bits - Generic register.
IE - 'd8 - 1 bit - Interrupt-enable flag. Allows interrupts only when IE == 'b1.
IR - 'd9 - 1 bit - Interrupt-running flag. Is set to 1 while an interrupt in is progress. Read-only.
ZD - 'd10 - 1 bit - Zero-division flag. Is set to 1 when a divide or modulus by zero is done. Must be set back to zero manually.
OF - 'd11 - 32 bits - Offset register. All memory addresses have this offset added to them. Useful as a stack pointer.

ISA:
    NOP = 0
        - No-op = 0
    LOAD = 1
        - load register containing address,register = 0
        - load fixed address,register = 1
    STORE = 2
        - store register,register containing address = 0
        - store constant,register containing address = 1
        - store register,fixed address = 2
    ADD = 3
        - add two registers and store result in a third register = 0
        - add register and constant, store result in another register = 1
    MULT = 4
        - multiply two registers and store result in a third register = 0
        - multiply register by constant and store result in another register = 1
    DIV = 5
        - divide two registers and store result in a third = 0
        - divide register by constant and store result in another register = 1
        - divide constant by register and store result in another register = 2
        - modulo two registers and store result in a third = 3
        - modulo register by constant and store result in another register = 4
        - modulo constant by register and store result in another register = 5
    OUT = 6
        - output value in one register to port in another register = 0
        - output constant value to port in another register = 1
        - output value in register to constant port = 2
    IN = 7
        - input from port stored in one register, storing the value read in another register = 0
        - input from constant port, storing the value in another register = 1
    MOV = 8
        - copy register to another register = 0
        - copy constant to register = 1
    CMP = 9
        - compare register with register, set another register based on the result (If first < second, result is 0. If first == second, result is 1. If first > second, result is 2.) = 0
        - compare register with constant, set another register based on the result (see prev.) = 1
        - compare constant with register, set another register based on the result (see prev.) = 2
    JMP = 10
        - jump unconditionally = 0
        - jump if equal (looks at result of CMP operation in specified register) = 1
        - jump if not equal (...) = 2
        - jump if less than (...) = 3
        - jump if greater than (...) = 4
        - jump if less than or equal (...) = 5
        - jump if greater than or equal (...) = 6
    RST = 11
        - Reset all registers and flags, thus soft-restarting the CPU. Contents of RAM are kept. The length of the .data section of the binary will be re-read from the 4 bytes at address 0. = 0
    HALT = 12
        - Stop the CPU. = 0
    ISR = 13
        - Set up an interrupt service routine. First register contains interrupt number. Second register contains address of first instruction in ISR. = 0
    INT = 14
        - Trigger interrupt. register contains interrupt number to trigger. = 0
        - Trigger interrupt. constant sets interrupt number to trigger. = 1
    ENDINT = 15
        - End interrupt and restore register states. = 0
    OR = 16
        - bitwise-or two registers and store result in a third register = 0
        - bitwise-or register and constant, store result in another register = 1
    AND = 17
        - bitwise-and two registers and store result in a third register = 0
        - bitwise-and register and constant, store result in another register = 1
    XOR = 18
        - bitwise-xor two registers and store result in a third register = 0
        - bitwise-xor register and constant, store result in another register = 1
    NOT = 19
        - bitwise-NOT a register and store the result in another register = 0
    SHIFT = 20
        - shift register left by number of bits specified in register, storing result in another register = 0
        - shift register left by constant number of bits, storing result in another register = 1
        - shift register right by number of bits specified in register, storing result in another register = 2
        - shift register right by constant number of bits, storing result in another register = 3
        - shift constant left by number of bits specified in register, storing result in another register = 4
        - shift constant right by number of bits specified in register, storing result in another register = 5

Format:
First 5 bits specify operation.
Next 3 bits specify variant.
Next 2 bits specify size (byte, word, doubleword)
Next 12 bits can be 3 registers.
OR next 8 bits can be two registers and next 32 bits can be an address/constant.

This makes each instruction a total of 7 bytes long, with either 34 or 6 bits left for future functionality.

Assembler:
    - 2's complement arithmetic support
