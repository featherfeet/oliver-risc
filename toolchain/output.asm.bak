.data:
    output_address = 0
    output_value = 0
    temp0 = 0 // General-purpose temporary storage location.
    string0 = "_"
    string1 = "SD boot..."
    string2 = "Card idle."
    string3 = "TYPE 1"
    string4 = "CMD8 err"
    string5 = "TYPE 2"
    string6 = "Init done"
    string7 = "CMD58 err"
    string8 = "SDHC card"
    string9 = "Not SDHC card"
    string10 = "CMD17 err"
    string11 = "Read err"
.code:
    // Start root node.
    CLOAD 4000000,G // Start stack pointer at 4 MB, grows downwards (towards address 0).
    CLOAD 96,A
    SUB G,A
    MOV A,G
    MOV G,F
    // Start variable declaration node.
    CLOAD 4,A
    ADD F,A
    CLOAD 67,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 8,A
    ADD F,A
    CLOAD 240,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 12,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 8,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 4,A
    ADD F,A
    RLOAD A,D
    MULT C,D
    MOV A,C
    // End expression node.
    CLOAD 12,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable declaration node.
    CLOAD 16,A
    ADD F,A
    CLOAD [string0],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 20,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 24,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 28,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure node.
    CMP A,A
    JMPE end_procedure_print
    start_procedure_print:
    // Start begin . . . end block node.
    // Start variable declaration node.
    CLOAD 4,A
    ADD G,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 20,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 8,A
    ADD F,A
    RLOAD A,D
    MULT C,D
    MOV A,C
    CLOAD 24,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_address
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    // Start buffer read node.
    CLOAD 0,E
    CLOAD 28,A
    ADD F,A
    RLOAD A,B
    ADD B,E
    RLOAD A,D
    CLOAD 255,A
    AND A,D
    MOV A,D
    ADD C,D
    MOV A,C
    // End buffer read node.
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start while loop node.
    label0:
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label1
    // Start begin . . . end block node.
    // Start procedure call node.
    LOAD output_address,A
    LOAD output_value,B
    OUT A,B
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 4,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 4,A
    ADD G,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 24,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 24,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_address,D
    ADD C,D
    MOV A,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_address
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    // Start buffer read node.
    CLOAD 4,A
    ADD G,A
    RLOAD A,E
    CLOAD 28,A
    ADD F,A
    RLOAD A,B
    ADD B,E
    RLOAD A,D
    CLOAD 255,A
    AND A,D
    MOV A,D
    ADD C,D
    MOV A,C
    // End buffer read node.
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // End begin . . . end block node.
    CMP A,A
    JMPE label0
    label1:
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    // Start buffer read node.
    CLOAD 0,E
    CLOAD 16,A
    ADD F,A
    RLOAD A,B
    ADD B,E
    RLOAD A,D
    CLOAD 255,A
    AND A,D
    MOV A,D
    ADD C,D
    MOV A,C
    // End buffer read node.
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start procedure call node.
    LOAD output_address,A
    LOAD output_value,B
    OUT A,B
    // End procedure call node.
    // End begin . . . end block node.
    return_from_procedure_print:
        MOV G,B
        CLOAD 8,A
        ADD A,G
        MOV A,G
        RLOAD B,IP
    end_procedure_print:
    // End procedure node.
    // Start procedure node.
    CMP A,A
    JMPE end_procedure_next_line
    start_procedure_next_line:
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 20,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 8,A
    ADD F,A
    RLOAD A,D
    MULT C,D
    MOV A,C
    CLOAD 24,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_address
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 32,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start procedure call node.
    LOAD output_address,A
    LOAD output_value,B
    OUT A,B
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 24,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 20,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 20,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    return_from_procedure_next_line:
        MOV G,B
        CLOAD 4,A
        ADD A,G
        MOV A,G
        RLOAD B,IP
    end_procedure_next_line:
    // End procedure node.
    // Start variable declaration node.
    CLOAD 32,A
    ADD F,A
    CLOAD [string1],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 32,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start inline assembly node.
    CLOAD 16082,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 1,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 0,C
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 75,D
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 1,E
    // End inline assembly node.
    // Start inline assembly node.
    sd_card_clock_loop:
    // End inline assembly node.
    // Start inline assembly node.
        CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
        OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
        ADD E,C
    // End inline assembly node.
    // Start inline assembly node.
        MOV A,C
    // End inline assembly node.
    // Start inline assembly node.
        CMP C,D
    // End inline assembly node.
    // Start inline assembly node.
        JMPL sd_card_clock_loop
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 16082,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 0,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start variable declaration node.
    CLOAD 36,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 40,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 44,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure node.
    CMP A,A
    JMPE end_procedure_send_sd_command
    start_procedure_send_sd_command:
    // Start begin . . . end block node.
    // Start inline assembly node.
    CLOAD 16082,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 0,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 36,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start inline assembly node.
    CLOAD 64,A
    // End inline assembly node.
    // Start inline assembly node.
    LOAD output_value,B
    // End inline assembly node.
    // Start inline assembly node.
    OR A,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 16081,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT B,A
    // End inline assembly node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 40,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start inline assembly node.
    CLOAD [output_value],A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 3,B
    // End inline assembly node.
    // Start inline assembly node.
    ADD A,B
    // End inline assembly node.
    // Start inline assembly node.
    RLOAD A,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 16081,C
    // End inline assembly node.
    // Start inline assembly node.
    OUT C,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD [output_value],A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 2,B
    // End inline assembly node.
    // Start inline assembly node.
    ADD A,B
    // End inline assembly node.
    // Start inline assembly node.
    RLOAD A,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT C,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD [output_value],A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 1,B
    // End inline assembly node.
    // Start inline assembly node.
    ADD A,B
    // End inline assembly node.
    // Start inline assembly node.
    RLOAD A,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT C,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD [output_value],A
    // End inline assembly node.
    // Start inline assembly node.
    RLOAD A,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT C,B
    // End inline assembly node.
    // Start variable declaration node.
    CLOAD 4,A
    ADD G,A
    CLOAD 255,B
    RSTORE B,A
    // End variable declaration node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 36,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label2
    JMPG label2
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 149,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 4,A
    ADD G,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    label2:
    // End conditional node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 36,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 8,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label3
    JMPG label3
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 135,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 4,A
    ADD G,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    label3:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 4,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start inline assembly node.
    CLOAD 16081,C
    // End inline assembly node.
    // Start inline assembly node.
    LOAD output_value,A
    // End inline assembly node.
    // Start inline assembly node.
    OUT C,A
    // End inline assembly node.
    // Start variable declaration node.
    CLOAD 8,A
    ADD G,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start while loop node.
    label4:
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 8,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 255,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPG label5
    // Start begin . . . end block node.
    // Start inline assembly node.
    CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,B
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 128,A
    // End inline assembly node.
    // Start inline assembly node.
    AND A,B
    // End inline assembly node.
    // Start inline assembly node.
    STORE A,output_value
    // End inline assembly node.
    // Start inline assembly node.
    STORE B,output_address
    // End inline assembly node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label6
    JMPG label6
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_address,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 44,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure return node.
    CMP A,A
    JMPE return_from_procedure_send_sd_command
    // End procedure return node.
    // End begin . . . end block node.
    label6:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 8,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 8,A
    ADD G,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    CMP A,A
    JMPE label4
    label5:
    // End begin . . . end block node.
    return_from_procedure_send_sd_command:
        MOV G,B
        CLOAD 12,A
        ADD A,G
        MOV A,G
        RLOAD B,IP
    end_procedure_send_sd_command:
    // End procedure node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 36,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start while loop node.
    label7:
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 44,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label8
    // Start begin . . . end block node.
    // Start procedure call node.
    CLOAD 12,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_send_sd_command
    // End procedure call node.
    // End begin . . . end block node.
    CMP A,A
    JMPE label7
    label8:
    // Start variable declaration node.
    CLOAD 48,A
    ADD F,A
    CLOAD [string2],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 48,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 8,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 36,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 426,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 12,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_send_sd_command
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 44,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start inline assembly node.
    LOAD output_value,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 4,B
    // End inline assembly node.
    // Start inline assembly node.
    AND A,B
    // End inline assembly node.
    // Start inline assembly node.
    STORE A,output_value
    // End inline assembly node.
    // Start variable declaration node.
    CLOAD 52,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 52,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable declaration node.
    CLOAD 56,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 52,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label9
    // Start begin . . . end block node.
    // Start variable declaration node.
    CLOAD 60,A
    ADD F,A
    CLOAD [string3],B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 60,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 56,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    label9:
    // End conditional node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 52,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label10
    JMPG label10
    // Start begin . . . end block node.
    // Start inline assembly node.
    CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    STORE C,output_value
    // End inline assembly node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 170,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label11
    // Start begin . . . end block node.
    // Start variable declaration node.
    CLOAD 64,A
    ADD F,A
    CLOAD [string4],B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 64,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start procedure call node.
    HALT
    // End procedure call node.
    // End begin . . . end block node.
    label11:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 2,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 56,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable declaration node.
    CLOAD 68,A
    ADD F,A
    CLOAD [string5],B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 68,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // End begin . . . end block node.
    label10:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 255,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 44,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start while loop node.
    label12:
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label13
    JMPG label13
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 55,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 36,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 12,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_send_sd_command
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 41,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 36,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 56,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 2,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label14
    JMPG label14
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 64,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    label14:
    // End conditional node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 56,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 2,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label15
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    label15:
    // End conditional node.
    // Start procedure call node.
    CLOAD 12,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_send_sd_command
    // End procedure call node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 44,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label16
    JMPG label16
    // Start begin . . . end block node.
    // Start inline assembly node.
    CMP A,A
    // End inline assembly node.
    // Start inline assembly node.
    JMPE got_ready_state
    // End inline assembly node.
    // End begin . . . end block node.
    label16:
    // End conditional node.
    // End begin . . . end block node.
    CMP A,A
    JMPE label12
    label13:
    // Start inline assembly node.
    got_ready_state:
    // End inline assembly node.
    // Start variable declaration node.
    CLOAD 72,A
    ADD F,A
    CLOAD [string6],B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 72,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 56,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 2,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label17
    JMPG label17
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 58,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 36,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 12,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_send_sd_command
    // End procedure call node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 44,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label18
    // Start begin . . . end block node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable declaration node.
    CLOAD 76,A
    ADD F,A
    CLOAD [string7],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 76,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start procedure call node.
    HALT
    // End procedure call node.
    // End begin . . . end block node.
    label18:
    // End conditional node.
    // Start inline assembly node.
    CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 192,A
    // End inline assembly node.
    // Start inline assembly node.
    AND A,C
    // End inline assembly node.
    // Start inline assembly node.
    STORE A,output_value
    // End inline assembly node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 192,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label19
    JMPG label19
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 3,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 56,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable declaration node.
    CLOAD 80,A
    ADD F,A
    CLOAD [string8],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 80,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // End begin . . . end block node.
    label19:
    // End conditional node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 192,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label20
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 3,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 56,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable declaration node.
    CLOAD 84,A
    ADD F,A
    CLOAD [string9],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 84,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // End begin . . . end block node.
    label20:
    // End conditional node.
    // Start inline assembly node.
    CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // End begin . . . end block node.
    label17:
    // End conditional node.
    // Start inline assembly node.
    CLOAD 16082,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 1,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start variable declaration node.
    CLOAD 88,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable declaration node.
    CLOAD 92,A
    ADD F,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start procedure node.
    CMP A,A
    JMPE end_procedure_read_data
    start_procedure_read_data:
    // Start begin . . . end block node.
    // Start variable declaration node.
    CLOAD 4,A
    ADD G,A
    CLOAD 0,B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 88,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 4,A
    ADD G,A
    RSTORE C,A
    // End variable assignment node.
    // Start inline assembly node.
    CLOAD 16082,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 0,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 56,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 3,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label21
    // Start begin . . . end block node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 4,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 512,D
    MULT C,D
    MOV A,C
    // End expression node.
    CLOAD 4,A
    ADD G,A
    RSTORE C,A
    // End variable assignment node.
    // End begin . . . end block node.
    label21:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 17,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 36,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 4,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 40,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 12,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_send_sd_command
    // End procedure call node.
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 44,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label22
    // Start begin . . . end block node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable declaration node.
    CLOAD 8,A
    ADD G,A
    CLOAD [string10],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 8,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start procedure return node.
    CMP A,A
    JMPE return_from_procedure_read_data
    // End procedure return node.
    // End begin . . . end block node.
    label22:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 255,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start while loop node.
    label23:
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 255,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPL label24
    JMPG label24
    // Start begin . . . end block node.
    // Start inline assembly node.
    CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,C
    // End inline assembly node.
    // Start inline assembly node.
    STORE C,output_value
    // End inline assembly node.
    // End begin . . . end block node.
    CMP A,A
    JMPE label23
    label24:
    // Start conditional node.
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 254,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label25
    // Start begin . . . end block node.
    // Start procedure call node.
    CLOAD 4,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_next_line
    // End procedure call node.
    // Start variable declaration node.
    CLOAD 12,A
    ADD G,A
    CLOAD [string11],B
    RSTORE B,A
    // End variable declaration node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 12,A
    ADD G,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 28,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 8,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_print
    // End procedure call node.
    // Start procedure return node.
    CMP A,A
    JMPE return_from_procedure_read_data
    // End procedure return node.
    // End begin . . . end block node.
    label25:
    // End conditional node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 92,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // Start while loop node.
    label26:
    // Start condition node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    // End expression node.
    MOV C,E
    // Start expression node.
    CLOAD 0,C
    CLOAD 92,A
    ADD F,A
    RLOAD A,D
    ADD C,D
    MOV A,C
    CLOAD 512,D
    ADD C,D
    MOV A,C
    // End expression node.
    CMP E,C
    // End condition node.
    JMPE label27
    JMPG label27
    // Start begin . . . end block node.
    // Start inline assembly node.
    CLOAD 16081,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 255,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // Start inline assembly node.
    IN A,B
    // End inline assembly node.
    // Start inline assembly node.
    LOAD output_value,C
    // End inline assembly node.
    // Start inline assembly node.
    RSTORE B,C
    // End inline assembly node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    LOAD output_value,D
    ADD C,D
    MOV A,C
    CLOAD 1,D
    ADD C,D
    MOV A,C
    // End expression node.
    STORE C,output_value
    // End variable assignment node.
    // End begin . . . end block node.
    CMP A,A
    JMPE label26
    label27:
    // Start inline assembly node.
    CLOAD 16082,A
    // End inline assembly node.
    // Start inline assembly node.
    CLOAD 1,B
    // End inline assembly node.
    // Start inline assembly node.
    OUT A,B
    // End inline assembly node.
    // End begin . . . end block node.
    return_from_procedure_read_data:
        MOV G,B
        CLOAD 16,A
        ADD A,G
        MOV A,G
        RLOAD B,IP
    end_procedure_read_data:
    // End procedure node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 0,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 88,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start variable assignment node.
    // Start expression node.
    CLOAD 0,C
    CLOAD 4000100,D
    ADD C,D
    MOV A,C
    // End expression node.
    CLOAD 92,A
    ADD F,A
    RSTORE C,A
    // End variable assignment node.
    // Start procedure call node.
    CLOAD 16,A
    SUB G,A
    MOV A,G
    CLOAD 18,A
    ADD IP,A
    RSTORE A,G
    CMP A,A
    JMPE start_procedure_read_data
    // End procedure call node.
    // Start procedure call node.
    HALT
    // End procedure call node.
    // End root node.
